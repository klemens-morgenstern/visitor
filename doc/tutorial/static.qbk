[/
    Copyright 2015, Klemens Morgenstern

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
/]

To construct a functor visitor just a call to the <code>boost::make_functor_visitor</code> is necessary,
though the functors are required to be distinguishable by there parameter list.

```
auto vis =  boost::make_functor_visitor(
	std::plus&lt;int&gt;(),
	std::negate&lt;int&gt;());
	
int x = vis(20, 22); //x == 42
int y = vis(12); //y == -12
//the type of vis is <classname>boost::functor_visitor&lt;int, std::plus&lt;int&gt;, std::negate&lt;int&gt;&gt;</classname></programlisting>
```

In the above example the return type is deduced automatically, which requires the all functors to have
the same return type and to not be templated. If this is not possible, a return type can be given explicitly.

```
struct add
{
	template&lt;typename T&gt;
	T operator()(T i, T j) {return i+j;}
};

auto vis = boost::make_functor_visitor&lt;double&gt;(
	add(),
	std::negate&lt;int&gt;());

int x = vis(20, 22); //x == 42
int y = vis(12.5); //y == -12
int z = vis(23.1, 22.4); //z == 45.5 
```
This allows the usage of generic lambdas, since they are basically implemented as <code>add</code> in the given example.

[endsect]