[/
    Copyright 2015, Klemens Morgenstern

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

/]
[section:introduction Introduction]

[section:abstract Abstract ]
  
The `visitor` is a library providing solutions for
implementing visitors as for exmaple used by boost.variant. The main idea is to 
provide a simple template to adapt several functors (with different parameter types) 
into one, which then selects the right on by the parameter type.

Notable features of `boost::visitor` include:


   - One line solution to construct a static_visitor. 
   - An apply_functors function for all classes implementing an apply_visitor method.
   - An polymorphic visitor interface. 
   - Adaptation of a static visitor into a polymorphic visitor. 
   - Polymorphic visitor deduction from a given boost::variant. 


[section:visitor_motivation Motivation ]

[section:visitor_motivation_problem Problem ]

When using boost::variant the static_visitor pattern
is to be preferred, because it is compile time checked. This solution is however more
verbose then it needs to be, so a solution to use functions (mainly lambdas) is very useful.


```
//write the content of boost::variant<int, double, std::string> to a stream.
struct visitor : boost::static_visitor<>
{
	std::ostream& ostr;
	visitor(std::ostream& ostr) : ostr(ostr) {};
	void operator()(int i) const { ostr << i;}
	void operator()(double d) const { ostr << d;}
	void operator()(std::string s) const { ostr << s;}
};
void write( std::ostream& out, boost::variant<int, double, std::string> & var)
{
	visitor vis(out);
	boost::apply_visitor(vis, vis);
}

//or the alternative using this library
void write_l( std::ostrean& out, boost::variant<int, double, std::string> & var)
{
	boost::apply_functors<void>(
		vis, 
		[&out](auto value){ out << value;}
	);
}
```
[endsect]

[endsect]

[endsect]

[endsect]
